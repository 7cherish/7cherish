----------------------------------------------------------------------------------------------------------------------------------------------------------------
Mybatis xml 종류
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Mybatis를 사용하려면 두 종류의 xml파일만 만들면 된다.
1. 설정관련 xml인 mybatis-config.xml
2. properties로 관리하던 sql을 mapper.xml

----------------------------------------------------------------------------------------------------------------------------------------------------------------
WEB-INF/lib/ 에 추가 할 라이브러리
----------------------------------------------------------------------------------------------------------------------------------------------------------------
mybatis-3.4.6.jar
taglibs-standard-compat-1.2.5.jar
taglibs-standard-impl-1.2.5.jar
taglibs-standard-jstlel-1.2.5.jar
taglibs-standard-spec-1.2.5.jar
ojdbc6.jar
json-simple-1.1.1.jar
gson-2.8.5.jar

----------------------------------------------------------------------------------------------------------------------------------------------------------------
mybatis-config.xml 설명
----------------------------------------------------------------------------------------------------------------------------------------------------------------
mybatis-config.xml 파일 규약에 대해
http://mybatis.org/dtd/mybatis-3-config.dtd에서 참고하고 있다.

configuration 안에 올 수 있는 파일은
settings, typeAliases(타입설정), environments(실제 DB설정), mappers 등이 있다.

----------------------------------------------------------------------------------------------------------------------------------------------------------------
settigs
----------------------------------------------------------------------------------------------------------------------------------------------------------------
- settigs란?
런타임시 마이바티스의 행위를 조정하기 위한 중요한 값들이다.

<setting name="jdbcTypeForNull" value="NULL"></setting>
Mybatis를 사용해서 DB에 넣다보면 실제 데이터가 NULL인데 그것이 들어가서 에러가 나는 경우가 있다.
데이터가 NULL이라면 DB에 문자 NULL로 처리해달라는 것이다.

----------------------------------------------------------------------------------------------------------------------------------------------------------------
mapUnderscoreToCamelCase
----------------------------------------------------------------------------------------------------------------------------------------------------------------
- mapUnderscoreToCamelCase란?
전통적인 데이터베이스 칼럼명 형태인 A_COLUMN을 CamelCase형태의 자바 프로퍼티명 형태인 aColumn으로 자동으로 매핑하도록 함
DB쪽에 대소문자를 구분하지 않아서 하이픈을 쓰는 경우가 많은데,
그것을 자바쪽으로 가져올때 카멜케이싱으로 자동으로 바꿔주는 것이다.

----------------------------------------------------------------------------------------------------------------------------------------------------------------
typeAliases
----------------------------------------------------------------------------------------------------------------------------------------------------------------
- typeAliases란?
타입 별칭은 자바 타입에 대한 짧은 이름이다. 
오직 XML 설정에서만 사용되며, 타이핑을 줄이기 위해 존재한다.
Mybatis에서 원칙적으로 어떤 데이터가 주고 받아질 때,
실제 데이터의 타입을 기본형을 제외하고는 풀패키지명으로 작성해야 한다.

----------------------------------------------------------------------------------------------------------------------------------------------------------------
environments
----------------------------------------------------------------------------------------------------------------------------------------------------------------
- environments란?
마이바티스는 여러개의 환경으로 설정할 수 있다. 
여러가지 이유로 여러개의 데이터베이스에 SQL Map을 적용하는데 도움이 된다. 
예를들어, 개발, 테스트, 리얼 환경을 위해 별도의 설정을 가지거나 같은 스키마를 여러개의 DBMS 제품을 사용할 경우들이다. 
그외에도 많은 경우가 있을 수 있다.

중요하게 기억해야 할 것은 다중 환경을 설정할 수는 있지만 
SqlSessionFactory 인스턴스마다 한개만 사용할 수 있다는 것이다.

두개의 데이터베이스에 연결하고 싶다면 
SqlSessionFactory 인스턴스를 두개 만들 필요가 있다. 
세개의 데이터베이스를 사용한다면 역시 세개의 인스턴스를 필요로 한다. 
기억하기 쉽게 데이터베이스별로 하나의 SqlSessionFactory

디폴트 환경(Environment) ID (예를들면. default=”development”).
각각의 환경을 정의한 환경(Environment) ID (예를들면. id=”development”).
TransactionManager 설정 (예를들면. type=”JDBC”)
DataSource 설정 (예를들면. type=”POOLED”)
디폴트 환경(environment)과 환경(environment) ID 는 용어 자체가 역할을 설명한다.

----------------------------------------------------------------------------------------------------------------------------------------------------------------
dataSource
----------------------------------------------------------------------------------------------------------------------------------------------------------------
- dataSource란?
dataSource엘리먼트는 표준 JDBC DataSource인터페이스를 사용하여 JDBC Connection객체의 소스를 설정한다.
여기엔 3 가지의 내장된 dataSource타입이 있다.
1. UNPOOLED
이 구현체는 매번 요청에 대해 커넥션을 열고 닫는 간단한 DataSource이다. 
조금 늦긴 하지만 성능을 크게 필요로 하지 않는 간단한 애플리케이션을 위해서는 괜찮은 선택이다. 
UNPOOLED DataSource는 5 개의 프로퍼티만으로 설정한다.

a) driver - JDBC드라이버의 패키지 경로를 포함한 결제 자바 클래스명
b) url - 데이터베이스 인스턴스에 대한 JDBC URL
c) username - 데이터베이스에 로그인 할 때 사용할 사용자명
d) password - 데이터베이스에 로그인 할 때 사용할 패스워드
e) defaultTransactionIsolationLevel - 커넥션에 대한 디폴트 트랜잭션 격리 레벨

2. POOLED
DataSource에 풀링이 적용된 JDBC 커넥션을 위한 구현체이다. 
이는 새로운 Connection 인스턴스를 생성하기 위해 매번 초기화하는 것을 피하게 해준다. 그래서 빠른 응답을 요구하는 웹 애플리케이션에서는 가장 흔히 사용되고 있다.
a) poolMaximumActiveConnections 
- 주어진 시간에 존재할 수 있는 활성화된(사용중인) 커넥션의 수. 디폴트는 10이다.

b) poolMaximumIdleConnections 
- 주어진 시간에 존재할 수 있는 유휴 커넥션의 수
강제로 리턴되기 전에 풀에서 “체크아웃” 될 수 있는 커넥션의 시간. 
디폴트는 20000ms(20 초)

c) poolTimeToWait 
- 풀이 로그 상태를 출력하고 비정상적으로 긴 경우 커넥션을 다시 얻을려고 시도하는 로우 레벨 설정. 
디폴트는 20000ms(20 초)

d) poolMaximumLocalBadConnectionTolerance 
– 이것은 모든 쓰레드에 대해 bad Connection이 허용되는 정도에 대한 낮은 수준의 설정입니다. 
만약 쓰레드가 bad connection 을 얻게 되어도 유효한 또 다른 connection 을 다시 받을 수 있습니다. 
하지만 재시도 횟수는 poolMaximumIdleConnections 과 poolMaximumLocalBadConnectionTolerance 의 합보다 많아야 합니다. 
디폴트는 3이다. (3.4.5 부터)

e) poolPingQuery 
- 커넥션이 작업하기 좋은 상태이고 요청을 받아서 처리할 준비가 되었는지 체크하기 위해 데이터베이스에 던지는 핑쿼리(Ping Query). 
디폴트는 “핑 쿼리가 없음” 이다. 
이 설정은 대부분의 데이터베이스로 하여금 에러메시지를 보게 할수도 있다.

f) poolPingEnabled 
- 핑쿼리를 사용할지 말지를 결정. 
사용한다면 오류가 없는(그리고 빠른) SQL 을 사용하여 poolPingQuery 프로퍼티를 설정해야 한다. 
디폴트는 false 이다.

g) poolPingConnectionsNotUsedFor 
- poolPingQuery가 얼마나 자주 사용될지 설정한다. 
필요이상의 핑을 피하기 위해 데이터베이스의 타임아웃 값과 같을 수 있다. 
디폴트는 0이다. 
디폴트 값은 poolPingEnabled가 true일 경우에만 모든 커넥션이 매번 핑을 던지는 값이다.

----------------------------------------------------------------------------------------------------------------------------------------------------------------
properties
----------------------------------------------------------------------------------------------------------------------------------------------------------------
- properties란?
이 설정은 외부에 옮길 수 있다. 
자바 프로퍼티 파일 인스턴스에 설정할 수도 있고 properties 엘리먼트의 하위 엘리먼트에 둘수도 있다.

----------------------------------------------------------------------------------------------------------------------------------------------------------------
기존 JDBC와 Mybatis의 차이점
----------------------------------------------------------------------------------------------------------------------------------------------------------------
기존 JDBC
1. Connection객체로부터 DB연결을 한다.
2. DriverManager.getConnection(url, user, password)로 Connection객체를 가져온다.

Mybatis
1. SqlSession로부터 DB연결을 한다. (Connection 확장 개념)
2. dataSource로부터 Sql세션을 가져와서 DB처리를 하는 것이다.

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Oracle SQL Developer 설정
----------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------------------------------------------------------------------
student패키지 관련
----------------------------------------------------------------------------------------------------------------------------------------------------------------
1. 관리자 system에서 사용자 mybatis생성
create user mybatis identified by mybatis
default tablespace users;

grant connect, resource to mybatis;

2. 접속 생성
접속 이름, 사용자 이름, 비밀번호 : mybatis 저장

3. mybatis.sql 작성
--student테이블 생성
create table student(
    student_no number primary key,
    student_name varchar2(30) not null,
    student_tel char(11) not null,
    student_email varchar2(50),
    student_addr varchar2(256),
    reg_date date default sysdate
);

--시퀀스 생성
create sequence seq_student_no;

--데이터 추가
insert into student values(seq_student_no.nextval, '홍길동', '01012341234', 'honggd@google.com', '서울시 강남구', default);

select * from student order by 1;
commit;


----------------------------------------------------------------------------------------------------------------------------------------------------------------
emp패키지 관련
----------------------------------------------------------------------------------------------------------------------------------------------------------------
1. kh로 접속

2. kh계정에서 다음테이블의 조회권한을 mybatis에 부여
grant select on kh.employee to mybatis;
grant select on kh.department to mybatis;
grant select on kh.job to mybatis;

3. mybatis로 접속해서 테이블 조회
select * from student;
select * from kh.employee;
select * from kh.department;
select * from kh.job;

----------------------------------------------------------------------------------------------------------------------------------------------------------------
기존 mv2와 달라지는 점
----------------------------------------------------------------------------------------------------------------------------------------------------------------
기존 mvc2에서 servlet이 controller 역할까지 해줬었는데, 이제 분리해서 사용할 것이다.
이것에 익숙해져야 하는 이유는 Spring이 이 구조이기 때문이다.

기존에는 기능을 추가할때마다 그에 상응하는 서블릿을 만들었는데,
이제는 서블릿을 하나만 만들고 그 서블릿 요청을 받아서
실제로 컨트롤러클래스를 별도로 만든다.

----------------------------------------------------------------------------------------------------------------------------------------------------------------
mvc model2의 진화버전
----------------------------------------------------------------------------------------------------------------------------------------------------------------
Servlet(Dispatcher Servlet @WebServlet("*.do"))을 하나 만들어놨더니 편해졌다.
처리해야할 요청url하고 컨트롤러만 command.properties에 적어주고
Controller Class 작성
Service단 interface 작성
Service단 실제 구현 Class 작성
Dao interface 작성
Dao 실제 구현 Class 작성
mapper.xml

----------------------------------------------------------------------------------------------------------------------------------------------------------------
command.properties
----------------------------------------------------------------------------------------------------------------------------------------------------------------
여기에 실제 사용자의 요청주소와 이것을 처리할 컨트롤러 클래스를 키와 밸류값으로 연결지어놓는것이다.
이 정보를 읽어다가 DispatcherServlet에서 연결시킨다.
key : /student/studentEnroll.do (사용자 요청주소)
value : com.kh.student.controller.StudentEnrollController

----------------------------------------------------------------------------------------------------------------------------------------------------------------
StudentDao
----------------------------------------------------------------------------------------------------------------------------------------------------------------
@Override
	public int selectStudentCount(SqlSession session) {
		// session.selectOne인 이유는 결과값이 하나이기 때문이다.
		// 즉 하나의 행이라는 것
		// 학생 한 명의 정보를 읽어오는 것도 selectOne
		int count = session.selectOne("student.selectStudentCount");
		System.out.println("count@StudentDao = " + count);
		return count;
	}
	
session.selectOne인 이유는 결과값이 하나이기 때문이다.
즉 하나의 행이라는 것
학생 한 명의 정보를 읽어오는 것도 selectOne이다.

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Mybatis 장점
----------------------------------------------------------------------------------------------------------------------------------------------------------------
동적쿼리를 신나게 구현한다.
JDBC에서 PreparedStatement 넣을 때 데이터는 동적으로 넣을 수 있는데,
컬럼명은 동적으로 넣지 못하느냐 많이 질문했었는데

Mybatis는 컬럼명도 동적으로 생성해준다.
쿼리 안에서 조건문을 처리 할 수 있다.

