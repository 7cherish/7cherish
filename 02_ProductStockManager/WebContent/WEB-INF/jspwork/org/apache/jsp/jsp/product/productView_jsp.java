/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.35
 * Generated at: 2018-12-10 07:06:37 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.product;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import product.model.vo.*;
import product.model.service.ProductService;
import product.model.exception.ProductException;
import java.util.*;

public final class productView_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("product.model.vo");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("product.model.service.ProductService");
    _jspx_imports_classes.add("product.model.exception.ProductException");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"/jsp/common/error.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	//1. 한글관련 인코딩처리
	request.setCharacterEncoding("utf-8");

	// 2. 전송값 파라미터 핸들링
	String pid = request.getParameter("pid");
	/* String pname = request.getParameter("pname");
	int price = Integer.parseInt(request.getParameter("price"));
	String desc = request.getParameter("desc");
	int stock = Integer.parseInt(request.getParameter("stock")); */
	
	
	// 3. 업무로직처리요청 : service단
	/* Product p = new ProductService().selectOne(pid); */

	Product p = null;
	
	try {
		p = new ProductService().selectOne(pid);
	} catch (ProductException e) {
		e.printStackTrace();
		throw new Exception("상품 상세보기 오류!");
	}
	
	List<Product> list = null;
	List<ProductIO> ioList = null;

	// service단에 업무(비지니스)로직 요청
	try {
		list = new ProductService().selectProductList();
		System.out.println("list@index.jsp = " + list);

		ioList = new ProductService().selectProductIOList();
		System.out.println("ioList@index.jsp = " + ioList);
	} catch (ProductException e) {
		e.printStackTrace(); // 로깅용 예외출력
		throw new Exception("재고관리시스템 index페이지 오류");
	}
	

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>상품상세보기페이지</title>\r\n");
      out.write("<style>\r\n");
      out.write("div#container {\r\n");
      out.write("\tborder: 1px solid;\r\n");
      out.write("\twidth: 80%;\r\n");
      out.write("\tmargin: 0 auto;\r\n");
      out.write("\tpadding: 50px;\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("div#container table {\r\n");
      out.write("\tborder-collapse: collapse;\r\n");
      out.write("\twidth: 355px;\r\n");
      out.write("\tmargin: auto;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("div#container table td {\r\n");
      out.write("\tpadding: 5px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* div#container table#io {\r\n");
      out.write("\tborder: 1px solid black;\r\n");
      out.write("\tborder-collapse: collapse;\r\n");
      out.write("\twidth: 50%;\r\n");
      out.write("} */\r\n");
      out.write("\r\n");
      out.write("div#container table#io th, table#io td {\r\n");
      out.write("\tborder: 1px solid black;\r\n");
      out.write("\tpadding: 5px;\r\n");
      out.write("}\r\n");
      out.write("/* tr 밑에 있는 첫 번째 td */\r\n");
      out.write("div#container table tr td:first-of-type {\r\n");
      out.write("\ttext-align: right;\r\n");
      out.write("\twidth: 30%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("div#container table tr td:last-of-type {\r\n");
      out.write("\ttext-align: left;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 마지막 버튼 td */\r\n");
      out.write("div#container table tr:last-of-type td {\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("a#to-main {\r\n");
      out.write("\ttext-decoration: none;\r\n");
      out.write("\tfloat: left;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 수정불가한 항목 스타일추가 */\r\n");
      out.write("input[readonly] {\r\n");
      out.write("\tbackground: lightgray;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 상품입출고테이블 */\r\n");
      out.write("div#container table#io {\r\n");
      out.write("\tborder:1px solid black;\r\n");
      out.write("\tborder-collapse:collapse;\r\n");
      out.write("\twidth:80%;\r\n");
      out.write("\tmargin:0 auto 15px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("div#container table#io th, table#io td{\r\n");
      out.write("\tborder:1px solid black;\r\n");
      out.write("\tpadding:5px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("<script src=\"");
      out.print(request.getContextPath());
      out.write("/js/jquery-3.3.1.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("/* \r\n");
      out.write("onload에 안 넣어서 안 됨\r\n");
      out.write("$(\"#btn-del\").on(\"click\", function(){\r\n");
      out.write("\tconsole.log(\"#btn-del clicked!!!\");\r\n");
      out.write("});\r\n");
      out.write("*/\r\n");
      out.write("\r\n");
      out.write("$(function() {\r\n");
      out.write("\t$(\"#btn-del\").on(\"click\", function() {\r\n");
      out.write("\t\t/* console.log(\"#btn-del clicked!!!\"); */\r\n");
      out.write("\t\tif(!confirm(\"정말로 삭제하겠습니까?\"))\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 삭제요청 전달\r\n");
      out.write("\t\t// 1. 페이지 이동 형식\r\n");
      out.write("\t\t");
      out.write("\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 2. 폼전송방식\r\n");
      out.write("\t\t$(\"#delFrm\").submit();\r\n");
      out.write("\t\t\r\n");
      out.write("\t});\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<form\r\n");
      out.write("\t\taction=\"");
      out.print(request.getContextPath() );
      out.write("/jsp/product/productDelete.jsp\"\r\n");
      out.write("\t\tid=\"delFrm\" method=\"post\">\r\n");
      out.write("\t\t<input type=\"hidden\" name=\"pid\" value=\"");
      out.print(pid );
      out.write("\" />\r\n");
      out.write("\t</form>\r\n");
      out.write("\t<div id=\"container\">\r\n");
      out.write("\t\t<a href=\"");
      out.print(request.getContextPath() );
      out.write("\" id=\"to-main\">Home</a> <br />\r\n");
      out.write("\t\t<h2>상품재고관리시스템 - 상세보기</h2>\r\n");
      out.write("\t\t<form\r\n");
      out.write("\t\t\taction=\"");
      out.print(request.getContextPath() );
      out.write("/jsp/product/productUpdate.jsp\"\r\n");
      out.write("\t\t\tmethod=\"post\">\r\n");
      out.write("\t\t\t<!-- 데이터가 바뀌면 post -->\r\n");
      out.write("\t\t\t<table>\r\n");
      out.write("\t\t\t\t<!-- (tr>td+(td>input))*5 -->\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td>상품아이디 :</td>\r\n");
      out.write("\t\t\t\t\t<td><input type=\"text\" name=\"pid\" value=\"");
      out.print(pid );
      out.write("\" readonly\r\n");
      out.write("\t\t\t\t\t\trequired /></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td>상품명 :</td>\r\n");
      out.write("\t\t\t\t\t<td><input type=\"text\" name=\"pname\" value=\"");
      out.print(p.getpName() );
      out.write("\"\r\n");
      out.write("\t\t\t\t\t\trequired /></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td>가격 :</td>\r\n");
      out.write("\t\t\t\t\t<td><input type=\"number\" name=\"price\" step=\"1000\"\r\n");
      out.write("\t\t\t\t\t\tvalue=\"");
      out.print(p.getPrice() );
      out.write("\" required /></td>\r\n");
      out.write("\t\t\t\t\t<!-- step은 n씩 증가하겠다는 것 -->\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td>재고 :</td>\r\n");
      out.write("\t\t\t\t\t<td><input type=\"number\" name=\"stock\"\r\n");
      out.write("\t\t\t\t\t\tvalue=\"");
      out.print(p.getStock() );
      out.write("\" required /></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td>상품설명 :</td>\r\n");
      out.write("\t\t\t\t\t<td><textarea name=\"desc\" cols=30 rows=3>\r\n");
      out.write("\t\t\t\t\t\t ");
      out.print(p.getDescription() );
      out.write("\t      \r\n");
      out.write("\t\t\t\t\t\t</textarea></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td colspan=\"2\"><input type=\"submit\" value=\"상품수정\" />\r\n");
      out.write("\t\t\t\t\t\t&nbsp;&nbsp; <input type=\"button\" id=\"btn-del\" value=\"상품삭제\" /></td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t</table>\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t<hr style=\"clear: right;\" />\r\n");
      out.write("\r\n");
      out.write("\t\t<h3>상품입출고현황</h3>\r\n");
      out.write("\t\t<table id=\"io\">\r\n");
      out.write("\t\t\t<thead>\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<th>입출고번호</th>\r\n");
      out.write("\t\t\t\t\t<th>상품아이디</th>\r\n");
      out.write("\t\t\t\t\t<th>날짜</th>\r\n");
      out.write("\t\t\t\t\t<th>수량</th>\r\n");
      out.write("\t\t\t\t\t<th>입/출고</th>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t</thead>\r\n");
      out.write("\t\t\t<tbody>\r\n");
      out.write("\t\t\t\t<!-- 리스트에서 불러온 것을 한 행마다 실행해줄 것 -->\r\n");
      out.write("\t\t\t\t");

	    if(!ioList.isEmpty()){
	    /* 리스트가 비어있지 않은 경우 */
	    	for(int i = 0; i < ioList.size(); i++){
	    		ProductIO pio = ioList.get(i);
	    
      out.write("\r\n");
      out.write("\t\t\t\t<tr pid=\"");
      out.print(pio.getProductId() );
      out.write("\">\r\n");
      out.write("\t\t\t\t\t<td>");
      out.print(pio.getIoNo() );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t<td>");
      out.print(pio.getProductId() );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t<td>");
      out.print(pio.getpDate() );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t<td>");
      out.print(pio.getAmount() );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t<td>");
      out.print("I".equals(pio.getStatus())?"입고":"출고" );
      out.write("</td>\r\n");
      out.write("\t\t\t\t\t");
      out.write("\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t");

	    	}
	    }
	    else{
	    /* 데이터가 없을 경우 대비 유효성 검사 */
	    
      out.write("\r\n");
      out.write("\t\t\t\t<tr>\r\n");
      out.write("\t\t\t\t\t<td colspan=\"4\">데이터가 없습니다.</td>\r\n");
      out.write("\t\t\t\t</tr>\r\n");
      out.write("\t\t\t\t");

	    }
		
      out.write("\r\n");
      out.write("\t\t\t</tbody>\r\n");
      out.write("\t\t</table>\r\n");
      out.write("\t\t<form\r\n");
      out.write("\t\t\taction=\"");
      out.print( request.getContextPath() );
      out.write("/jsp/product/productIOInsert.jsp\"\r\n");
      out.write("\t\t\tmethod=\"post\">\r\n");
      out.write("\t\t\t<input type=\"radio\" name=\"status\" id=\"input\" value=\"I\" checked />\r\n");
      out.write("\t\t\t<label for=\"input\">입고</label> \r\n");
      out.write("\t\t\t<input type=\"radio\" name=\"status\" id=\"output\" value=\"O\" />\r\n");
      out.write("\t\t\t<label for=\"output\">출고</label>\r\n");
      out.write("\t\t\t&nbsp;&nbsp; \r\n");
      out.write("\t\t\t<input type=\"number\" name=\"amount\" id=\"amount\" min=\"0\" placeholder=\"수량을 입력하세요.\" required /> \r\n");
      out.write("\t\t\t<input type=\"hidden\" name=\"pid\" value=\"");
      out.print(p.getProductId());
      out.write("\" />\r\n");
      out.write("\r\n");
      out.write("\t\t\t<!-- type:submit태그에서 유효성검사코드 onsubmit이 아닌 onclick작성할 것. form태그에서 onsubmit속성으로 작성. -->\r\n");
      out.write("\t\t\t<!-- <input type=\"submit\" onsumbit=\"return fn_pio_validate();\" value=\"전송\" /> -->\r\n");
      out.write("\t\t\t<input type=\"submit\" onclick=\"return fn_pio_validate();\" value=\"전송\" />\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t</div>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
