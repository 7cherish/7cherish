/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.35
 * Generated at: 2018-12-07 10:27:10 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.jsp.product;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import product.model.service.ProductService;
import product.model.vo.*;
import product.model.exception.ProductException;
import java.util.*;

public final class productFinder_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("product.model.vo");
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("java.util");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("product.model.service.ProductService");
    _jspx_imports_classes.add("product.model.exception.ProductException");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			"/jsp/common/error.jsp", true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

	// 1. 인코딩(get방식이므로 생략가능)
	
	// 2. 파라미터핸들링
	String srchType = request.getParameter("srchType");
	String srchKeyword = request.getParameter("srchKeyword");
	System.out.printf("[%s = %s]\n", srchType, srchKeyword);
	
	// 3. 업무로직 => 서비스단
	// list에다가 결과값 담은 다음에 담아만 두면 밑에서 사용할 수 있을테니까..
	// 상품아이디와 상품명 검색을 따로 처리해야한다.
	List<Product> list = null;
	try {
		if("pname".equals(srchType)){
			list = new ProductService().selectByPName(srchKeyword);
		}
		else{
			// @실습문제
			list = new ProductService().selectByPId(srchKeyword);			
		}
	} catch (ProductException e) {
		throw new Exception("상품 검색 오류!");
	}
	
	// 4. view단 처리 (같은 페이지에서 결과를 보여주므로 생략)

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>상품 재고 관리</title>\r\n");
      out.write("<script type=\"text/javascript\" src=\"");
      out.print(request.getContextPath() );
      out.write("/js/jquery-3.3.1.js\"></script>\r\n");
      out.write("<script>\r\n");
      out.write("\r\n");
      out.write("$(function(){\t\r\n");
      out.write("\t// 테이블행 클릭시, 해당 상품의 상세보기 페이지로 이동\r\n");
      out.write("\t$(\"table tr\").on(\"click\", function(e){\r\n");
      out.write("\t\tvar target = e.target.tagName;\r\n");
      out.write("\t\t/*\r\n");
      out.write("\t\tconsole.log(\"target = \", target);\r\n");
      out.write("\t\t*/\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t/* 여기서 this는 tr */\r\n");
      out.write("\t\tvar pid = $(this).attr(\"pid\");\r\n");
      out.write("\t\t/*\r\n");
      out.write("\t\tconsole.log(\"pid = \", pid);\r\n");
      out.write("\t\t*/\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 데이터 없는 경우 (헤더를 클릭한 경우) return\r\n");
      out.write("\t\tif(pid == undefined) return;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 상세보기 페이지로 이동\r\n");
      out.write("\t\tlocation.href=\"");
      out.print(request.getContextPath() );
      out.write("/jsp/product/productView.jsp?pid=\" + pid;\r\n");
      out.write("\t\t\r\n");
      out.write("\t});\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("</script>\r\n");
      out.write("<style>\r\n");
      out.write("div#container {\r\n");
      out.write("\t/* border:1px solid black; */\r\n");
      out.write("\twidth: 80%;\r\n");
      out.write("\tmargin: auto;\r\n");
      out.write("\tpadding: 50px;\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("section {\r\n");
      out.write("\tfloat: left;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("section#tbl-container {\r\n");
      out.write("\t/* border:1px solid black; */\r\n");
      out.write("\twidth: 50%;\r\n");
      out.write("\ttext-align: center;\r\n");
      out.write("\tpadding: 0 50px 50px\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("section#tbl-container table {\r\n");
      out.write("\tborder: 1px solid black;\r\n");
      out.write("\tborder-collapse: collapse;\r\n");
      out.write("\twidth: 100%;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("section#tbl-container table th, section#tbl-container table td {\r\n");
      out.write("\tborder: 1px solid black;\r\n");
      out.write("\tpadding: 5px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("section#srch-container {\r\n");
      out.write("\t/* border:1px solid black; */\r\n");
      out.write("\twidth: 25%;\r\n");
      out.write("\theight: 300px;\r\n");
      out.write("\ttext-align: left;\r\n");
      out.write("\tpadding: 30px 30px 100px 30px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("/* 마우스오버시 컬러변경효과 */\r\n");
      out.write("section#tbl-container table tr:hover td {\r\n");
      out.write("\tbackground: lightgray;\r\n");
      out.write("\tcolor: white;\r\n");
      out.write("\tcursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("#to-main{\r\n");
      out.write("\ttext-decoration: none;\r\n");
      out.write("\tfloat: left;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("<div id=\"container\">\r\n");
      out.write("\t<!-- 인덱스 페이지로 돌아가는 a 태그 -->\r\n");
      out.write("\t<a href=\"");
      out.print(request.getContextPath() );
      out.write("\" id='to-main'></a>\r\n");
      out.write("\t<h2>상품재고관리 시스템</h2>\r\n");
      out.write("\t<section id=\"tbl-container\">\r\n");
      out.write("\t<h3>상품현황</h3>\r\n");
      out.write("\t<table id=\"product\">\r\n");
      out.write("\t\t<thead>\r\n");
      out.write("\t\t\t<tr>\r\n");
      out.write("\t\t\t\t<th>상품아이디</th>\r\n");
      out.write("\t\t\t\t<th>상품명</th>\r\n");
      out.write("\t\t\t\t<th>가격</th>\r\n");
      out.write("\t\t\t\t<th>재고량</th>\r\n");
      out.write("\t\t\t</tr>\r\n");
      out.write("\t\t</thead>\r\n");
      out.write("\t\t<tbody>\r\n");
      out.write("\t\t<!-- 리스트에서 불러온 것을 한 행마다 실행해줄 것 -->\r\n");
      out.write("\t\t");

	    if(!list.isEmpty()){
	    /* 리스트가 비어있지 않은 경우 */
	    	for(int i = 0; i < list.size(); i++){
	    		Product p = list.get(i);
	    
      out.write("\r\n");
      out.write("\t    \t<tr pid=\"");
      out.print(p.getProductId() );
      out.write("\">\r\n");
      out.write("\t    \t\t<td>");
      out.print(p.getProductId() );
      out.write("</td>\r\n");
      out.write("\t    \t\t<td>");
      out.print(p.getpName() );
      out.write("</td>\r\n");
      out.write("\t    \t\t<td>");
      out.print(p.getPrice() );
      out.write("</td>\r\n");
      out.write("\t    \t\t<td>");
      out.print(p.getStock() );
      out.write("</td>\r\n");
      out.write("\t    \t</tr>\r\n");
      out.write("\t    ");

	    	}
	    }
	    else{
	    /* 데이터가 없을 경우 대비 유효성 검사 */
	    
      out.write("\r\n");
      out.write("\t    \t<tr>\r\n");
      out.write("\t    \t\t<td colspan=\"4\">데이터가 없습니다.</td>\r\n");
      out.write("\t    \t</tr>\r\n");
      out.write("\t    ");

	    }
		
      out.write("\r\n");
      out.write("\t\t</tbody>\r\n");
      out.write("\t</table>\r\n");
      out.write("\r\n");
      out.write("\t</section>\r\n");
      out.write("\t<section id=\"srch-container\">\r\n");
      out.write("\t\t<form action=\"");
      out.print(request.getContextPath() );
      out.write("/jsp/product/productFinder.jsp\" \r\n");
      out.write("\t\t\t  name=\"srchFrm\">\r\n");
      out.write("\t\t\t<input type=\"radio\" \r\n");
      out.write("\t\t\t\t   name=\"srchType\" \r\n");
      out.write("\t\t\t\t   id=\"pid\" \r\n");
      out.write("\t\t\t\t   value=\"pid\" \r\n");
      out.write("\t\t\t\t   ");
      out.print("pid".equals(srchType)?"checked":"" );
      out.write("/>\r\n");
      out.write("\t\t\t<label for=\"pid\">상품아이디</label>\r\n");
      out.write("\t\t\t<input type=\"radio\" \r\n");
      out.write("\t\t\t\t   name=\"srchType\" \r\n");
      out.write("\t\t\t\t   id=\"pname\" \r\n");
      out.write("\t\t\t\t   value=\"pname\" />\r\n");
      out.write("\t\t\t<label for=\"pname\">상품명</label> \r\n");
      out.write("\t\t\t<br /><br />\r\n");
      out.write("\t\t\t<input type=\"search\" \r\n");
      out.write("\t\t\t\t   name=\"srchKeyword\" \r\n");
      out.write("\t\t\t\t   id=\"srchKeyword\" \r\n");
      out.write("\t\t\t\t   size=25\r\n");
      out.write("\t\t\t\t   required\r\n");
      out.write("\t\t\t\t   placeholder=\"검색할 아이디를 입력하세요.\"\r\n");
      out.write("\t\t\t\t   value=\"");
      out.print(srchKeyword  );
      out.write("\"/>\r\n");
      out.write("\t\t\t<br /><br />\r\n");
      out.write("\t\t\t<input type=\"submit\" onclick=\"return srchValidate();\" value=\"검색\" />\r\n");
      out.write("\t\t</form>\r\n");
      out.write("\t</section>\r\n");
      out.write("</div>\r\n");
      out.write("<script>\r\n");
      out.write("$(\"[name=srchType]\").change(function(){\r\n");
      out.write("\t\tvar id = $(this).attr(\"id\");\r\n");
      out.write("\t\tif(id === 'pid'){\r\n");
      out.write("\t\t\t$(\"#srchKeyword\").attr(\"placeholder\", \"검색할 상품아이디을 입력하세요.\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\telse{\r\n");
      out.write("\t\t\t$(\"#srchKeyword\").attr(\"placeholder\", \"검색할 상품명을 입력하세요.\");\t\t\t\r\n");
      out.write("\t\t}\r\n");
      out.write("});\r\n");
      out.write("// 검색어 유효성 검사\r\n");
      out.write("function srchValidate(){\r\n");
      out.write("\tvar len = $(\"#srchKeyword\").val().trim().length;\r\n");
      out.write("\tif(len == 0){\r\n");
      out.write("\t\talert(\"검색어를 입력하세요.\");\r\n");
      out.write("\t\treturn false;\r\n");
      out.write("\t}\r\n");
      out.write("\treturn true;\r\n");
      out.write("}\r\n");
      out.write("</script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
