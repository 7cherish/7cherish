/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.35
 * Generated at: 2018-12-26 12:05:14 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.csv;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class index_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>ajax : csv</title>\r\n");
      out.write("<script src=\"");
      out.print(request.getContextPath());
      out.write("/js/jquery-3.3.1.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("#myDiv{\r\n");
      out.write("\tpadding: 10px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("img{\r\n");
      out.write("\twidth: 100px;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("table{\r\n");
      out.write("\tborder: 1px solid;\r\n");
      out.write("\tborder-collapse: collapse;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("th, td{\r\n");
      out.write("\tborder: 1px solid;\r\n");
      out.write("\tpadding: 10px;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("<!-- \r\n");
      out.write("(심화) CSV형식의 예제\r\n");
      out.write("CSV(Comma Separated Values)는 여러 데이터를 쉼표로 구분해서 표현하는 방법\r\n");
      out.write("\r\n");
      out.write("CSV 데이터\r\n");
      out.write("\r\n");
      out.write("\t홍길동,20,서울\r\n");
      out.write("\t김말똥,30,경기\r\n");
      out.write("\r\n");
      out.write("\tvar responseData = xhttp.responseText;\r\n");
      out.write("\tvar rows = responseData.split(\"\\n\");  \t// 개행문자로 행을 구분\r\n");
      out.write("\tvar cols = rows[0].split(\",\");\t\t// 쉼표(,)로 열을 구분\r\n");
      out.write("\tvar rowData = cols[0] + \"\\t\" + cols[1] +\"\\t\\ + cols[2]\";\r\n");
      out.write("\talert(rowData);\r\n");
      out.write(" -->\r\n");
      out.write("\t<h2>ajax : csv</h2>\r\n");
      out.write("\t<p>CSV : Comma Seperated Values</p>\r\n");
      out.write("\t<button id=\"btn\">실행</button>\r\n");
      out.write("\t<div id=\"myDiv\"></div>\r\n");
      out.write("\r\n");
      out.write("<script>\r\n");
      out.write("$(\"#btn\").click(function(){\r\n");
      out.write("\t// ajax 호출 코드\r\n");
      out.write("\t$.ajax({\r\n");
      out.write("\t\turl: \"");
      out.print(request.getContextPath());
      out.write("/csv.do\",\r\n");
      out.write("\t\ttype: \"get\",\r\n");
      out.write("\t\tdataType: \"text\",\r\n");
      out.write("\t\tsuccess: function(data){\r\n");
      out.write("\t\t\t// console.log(\"data@index.jsp\", data);\r\n");
      out.write("\t\t\t// csv@AjaxCSVServlet=박보검,01007890789,parkBogum.jpg§줄리아 로버츠,01012341234,juliaRoberts.jpg§맷 데이먼,01045674567,mattDamon.jpg\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar memberArr = data.split(\"§\");\r\n");
      out.write("\t\t\tconsole.log(\"memberArr@index.jsp\", memberArr);\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t\tvar table = $(\"<table></table>\");\r\n");
      out.write("\t\t\tfor(var i=0; i<memberArr.length; i++){\r\n");
      out.write("\t\t\t\tvar m = memberArr[i].split(\",\");\r\n");
      out.write("\t\t\t\tvar html = \"<tr><td>\";\r\n");
      out.write("\t\t\t\thtml += \"<img src='");
      out.print(request.getContextPath());
      out.write("/images/\"+m[2]+\"'/></td>\";\r\n");
      out.write("\t\t\t\thtml += \"<td>\"+m[0]+\"</td>\";\r\n");
      out.write("\t\t\t\thtml += \"<td>\"+m[1];\r\n");
      out.write("\t\t\t\thtml += \"</td></tr>\";\r\n");
      out.write("\t\t\t\ttable.append(html); // table에 한 행마다 추가\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t$(\"#myDiv\").html(table);\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("});\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
