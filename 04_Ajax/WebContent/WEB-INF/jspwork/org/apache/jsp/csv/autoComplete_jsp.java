/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.35
 * Generated at: 2018-12-27 09:50:24 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.csv;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class autoComplete_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>ajax : csv : autoComplete</title>\r\n");
      out.write("<script src=\"");
      out.print(request.getContextPath());
      out.write("/js/jquery-3.3.1.js\"></script>\r\n");
      out.write("<style>\r\n");
      out.write("ul#autoComplete {\r\n");
      out.write("\tmin-width: 171px;\r\n");
      out.write("\tborder: 1px solid gray;\r\n");
      out.write("\tdisplay: none;\r\n");
      out.write("\tpadding: 0;\r\n");
      out.write("\tmargin: 0;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("ul#autoComplete li {\r\n");
      out.write("\tpadding: 0 10px;\r\n");
      out.write("\tlist-style: none; /* 리스트앞의 불릿 제거 */\r\n");
      out.write("\tcursor: pointer;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("ul#autoComplete li.selected {\r\n");
      out.write("\tbackground: lightgreen;\r\n");
      out.write("\tcolor: white;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("span.srchVal {\r\n");
      out.write("\tcolor: red;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<h2>ajax : csv : autoComplete</h2>\r\n");
      out.write("\t<h3>우리반 친구 검색하기</h3>\r\n");
      out.write("\t<input type=\"text\" id=\"srchName\" />\r\n");
      out.write("\t<br />\r\n");
      out.write("\t<ul id=\"autoComplete\">\r\n");
      out.write("\t\t<!-- 테스트 목록 -->\r\n");
      out.write("\t\t<li>가나다</li>\r\n");
      out.write("\t\t<li>나다라</li>\r\n");
      out.write("\t\t<li>다라마</li>\r\n");
      out.write("\t\t<li>라마바</li>\r\n");
      out.write("\t\t<li>마바사</li>\r\n");
      out.write("\t</ul>\r\n");
      out.write("\t<script>\r\n");
      out.write("$(\"#srchName\").keyup(function(e){\r\n");
      out.write("\tconsole.log(\"e.key@autoComplete.jsp=\", e.key); // 현재 눌려진 키값\r\n");
      out.write("\t// 선택된 것은 seleted라는 클래스값을 준다.\r\n");
      out.write("\tvar selected = $(\".selected\");\r\n");
      out.write("\tvar li = $(\"#autoComplete li\");\r\n");
      out.write("\t\r\n");
      out.write("\tif(e.key == 'ArrowDown'){\r\n");
      out.write("\t\tif(selected.length == 0){\r\n");
      out.write("\t\t\t// 선택된게 하나도 없을 때\r\n");
      out.write("\t\t\t$(\"#autoComplete li:first\").addClass(\"selected\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\t// 현재 선택된 값이 li의 last일때\r\n");
      out.write("\t\telse if(selected.is(li.last())){\r\n");
      out.write("\t\t\t// 처리코드 없음\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\telse{\r\n");
      out.write("\t\t\t// 그외 \r\n");
      out.write("\t\t\tselected.removeClass(\"selected\")\r\n");
      out.write("\t\t\t\t\t.next()\r\n");
      out.write("\t\t\t\t\t.addClass(\"selected\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\telse if(e.key == 'ArrowUp'){\r\n");
      out.write("\t\tif(selected.length == 0){\r\n");
      out.write("\t\t\t// 선택된게 없을 때\r\n");
      out.write("\t\t\t// 처리코드 없음\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\telse if(selected.is(li.first())){\r\n");
      out.write("\t\t\t// li의 first일때\r\n");
      out.write("\t\t\tselected.removeClass(\"selected\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t\telse{\r\n");
      out.write("\t\t\tselected.removeClass(\"selected\")\r\n");
      out.write("\t\t\t\t\t.prev()\r\n");
      out.write("\t\t\t\t\t.addClass(\"selected\");\r\n");
      out.write("\t\t}\r\n");
      out.write("\t}\r\n");
      out.write("\telse if(e.key == 'Enter'){\r\n");
      out.write("\t\t// 값 선택\r\n");
      out.write("\t\t$(this).val(selected.text());\r\n");
      out.write("\t\t// 검색어 목록은 감추고, li태그들은 모두 삭제\r\n");
      out.write("\t\t$(\"#autoComplete\").hide().children().remove();\r\n");
      out.write("\t}\r\n");
      out.write("\telse{\r\n");
      out.write("\t\tvar srchName = $(this).val().trim();\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 사용자가 공백만을 입력한 경우, ajax 요청하지 않는 코드 작성\r\n");
      out.write("\t\tif(srchName.length == 0)\r\n");
      out.write("\t\t\treturn;\r\n");
      out.write("\t\t\r\n");
      out.write("\t\t// 사용자의 입력값을 서버에 전달하고\r\n");
      out.write("\t\t// 해당하는 값을 다 읽어서 csv형태로 서버에 전달\r\n");
      out.write("\t\t// csv를 다시 가공해서 autoComplete안에 list로 만들어 볼게요.\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl: \"");
      out.print(request.getContextPath());
      out.write("/csv/autoComplete.do\",\r\n");
      out.write("\t\t\ttype: \"post\",\r\n");
      out.write("\t\t\tdata: \"srchName=\" + srchName, // 방법1 : 문자로 전달하는 방법\r\n");
      out.write("\t\t\t//data: {srchName:srchName}, // 방법2 : 객체로 전달하는 방법\r\n");
      out.write("\t\t\t//--------전송명 : 전송값\r\n");
      out.write("\t\t\tsuccess: function(data){\r\n");
      out.write("\t\t\t\t console.log(\"data@autoComplete.jsp=\", data);\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tvar nameArr = data.split(\",\");\r\n");
      out.write("\t\t\t\tvar html = \"\";\r\n");
      out.write("\t\t\t\tfor(var i=0; i<nameArr.length; i++){\r\n");
      out.write("\t\t\t\t\t// html += \"<li>\" + nameArr[i] + \"</li>\";\r\n");
      out.write("\t\t\t\t\t// 검색어 컬러처리\r\n");
      out.write("\t\t\t\t\thtml += \"<li>\" + nameArr[i].replace(srchName, \"<span class='srchVal'>\" + srchName + \"</span>\") + \"</li>\";\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t// 서버로부터 전달된 값이 있는 경우만 보이게 처리\r\n");
      out.write("\t\t\t\tif(data.length != 0){\r\n");
      out.write("\t\t\t\t// ajax 처리 후 보여준다.\r\n");
      out.write("\t\t\t\t$(\"#autoComplete\").html(html).css('display', 'inline-block');\t\t\t\t\t\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t\r\n");
      out.write("\t\t});\r\n");
      out.write("\t}\r\n");
      out.write("});\r\n");
      out.write("\r\n");
      out.write("$(function(){\r\n");
      out.write("\t// 이벤트 버블링을 이용한 click, hover처리\r\n");
      out.write("\t$(\"#autoComplete\").on(\"click\", \"li\", function(){\r\n");
      out.write("\t\tconsole.log(\"click...\");\r\n");
      out.write("\t\t// 1. 클릭하면 해당 정보를 인풋태그의 값으로 넣어주기  \r\n");
      out.write("\t\t$(\"#srchName\").val($(this).text()); // 여기서 this는 이벤트 발생 객체\r\n");
      out.write("\t\t// 2. 검색어 목록은 감추고. li 태그 모두 삭제\r\n");
      out.write("\t\t$(\"#autoComplete\").hide()\r\n");
      out.write("\t\t\t\t\t\t  .children()\r\n");
      out.write("\t\t\t\t\t\t  .remove();\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"#autoComplete\").on(\"mouseenter\", \"li\", function(){\r\n");
      out.write("\t\tconsole.log(\"mouseenter...\");\r\n");
      out.write("\t\t$(this).siblings().removeClass(\"selected\");\r\n");
      out.write("\t\t$(this).addClass(\"selected\");\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("\t$(\"#autoComplete\").on(\"mouseleave\", \"li\", function(){\r\n");
      out.write("\t\tconsole.log(\"mouseleave...\");\r\n");
      out.write("\t\t// 마우스가 떠날때\r\n");
      out.write("\t\t$(this).removeClass(\"selected\");\t\r\n");
      out.write("\t});\r\n");
      out.write("\t\r\n");
      out.write("});\r\n");
      out.write("\t\r\n");
      out.write("</script>\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
